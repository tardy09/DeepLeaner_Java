1.高层模块 不应该依赖于底层模块，两者应该依赖于其抽象
2.抽象应该不依赖于细节
3.细节应该依赖于抽象

每一个逻辑的实现都是原子逻辑组成的，不可分割的原子逻辑就是底层模块
，原子模块的再组装就是高层模块。在Java语言里面，抽象就是借口或者抽象类，两者都是不能直接被实例化的；
细节就是实现类，特点就是可以直接进行实例化，也就是可以加上一个关键字new产生一个对象，依赖倒置
原则在Java语言里面的表现就是：
 1.模块间的依赖通过抽象来产生，实现类之间不发生直接的依赖关系，其依赖关系是
 通过借口或者抽象类来完成的；
 2.借口或者抽象不依赖于实现类
 3.实现类依赖借口或者抽象类

 也就是面向接口编程。
 采用依赖倒置原则可以减少类之间的耦合，提高系统的稳定性，降低并行开发引起
 的风险，提高代码的可读性和维护性。
 如果不使用依赖倒置原则就会加重类之间的耦合性，降低系统的安全性，增加并行开发引起的风险，
 降低代码的可读性和可维护性，。
   两个类之间有依赖关系，只要约定好两者之间接口的依赖关系就好了，
