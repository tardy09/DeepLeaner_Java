一个缓存示例说明读写锁的使用方式
Cache组合了一个非线程安全的HashMap作为缓存的实现，同时使用读写锁的读锁和写锁来保证Cache是线程安全的。
在读操作 get(String key)方法中，需要获取读锁，这使得并发访问该方法时不会被阻塞。写操作put(String key, Object value)和clear()方法
，在更新HashMap时必须提前获取写锁，当写锁被获取后，其他线程对于读锁和写锁的获取均被阻塞，
而只有写锁被释放 之后，其他读写操作才能继续。Cache使用读写锁提升读操作并发性，也保证每次写操作对所有的读写操作的可见性，同时简化了编程方式

接下来将分析ReentrantReadWriteLock的实现，主要包括：读写状态的设计、写锁的获取与释放、读锁的获取与释放以及锁降级
（以下没有特别说明读写锁均可认为是ReentrantReadWriteLock）