泛型"字面意思就是广泛的类型，类、接口和方法代码可以应用于非常广泛的类型，
代码与它们能够操作的数据类型不再绑定在一起，同一套代码，
可以用于多种数据类型，这样，不仅可以复用代码，降低耦合，
同时，还可以提高代码的可读性和安全性。

使用泛型，还可以省去繁琐的强制类型转换，
再加上明确的类型信息，代码可读性也会更好。

泛型是计算机程序中一种重要的思维方式，它将数据结构和算法与数据类型相分离，
使得同一套数据结构和算法，能够应用于各种数据类型，而且还可以保证类型安全，
提高可读性。在Java中，泛型广泛应用于各种容器类中，理解泛型是深刻理解容器的基础。
<T extends E>与<? extends E>

那么问题来了，同样是extends关键字，同样应用于泛型，<T extends E>和<? extends E>到底有什么关系？

它们用的地方不一样，我们解释一下：

<T extends E>用于定义类型参数，它声明了一个类型参数T，
可放在泛型类定义中类名后面、泛型方法返回值前面。
<? extends E>用于实例化类型参数，它用于实例化泛型变量中
的类型参数，只是这个具体类型是未知的，只知道它是E或E的某个子类型。

通配符形式更为简洁，但上面两种通配符都有一个重要的限制，只能读，不能写。
参数类型间的依赖关系
     除了这种需要写的场合，如果参数类型之间有依赖关系，也只能用类型参数


通配符还是类型参数？

现在我们再来看，泛型方法，到底应该用通配符的形式，还是加类型参数？两者到底有什么关系？我们总结下：

1.通配符形式都可以用类型参数的形式来替代，通配符能做的，用类型参数都能做。
2.通配符形式可以减少类型参数，形式上往往更为简单，可读性也更好，所以，能用通配符的就用通配符。
3.如果类型参数之间有依赖关系，或者返回值依赖类型参数，或者需要写操作，则只能用类型参数。
4.通配符形式和类型参数往往配合使用，比如，上面的copy方法，定义必要的类型参数，使用通配符表达依赖，并接受更广泛的数据类型。

通配符比较

两种通配符形式<? super E>和<? extends E>也比较容易混淆，我们再来比较下。

它们的目的都是为了使方法接口更为灵活，可以接受更为广泛的类型。
<? super E>用于灵活写入或比较，使得对象可以写入父类型的容器，使得父类型的比较方法可以应用于子类对象。
<? extends E>用于灵活读取，使得方法可以读取E或E的任意子类型的容器对象。
Java容器类的实现中，有很多这种用法，比如说，Collections中就有如下一些方法：

public static <T extends Comparable<? super T>> void sort(List<T> list)
public static <T> void sort(List<T> list, Comparator<? super T> c)
public static <T> void copy(List<? super T> dest, List<? extends T> src)
public static <T> T max(Collection<? extends T> coll, Comparator<? super T> comp)

另外需要注意的是泛型类型参数不能用于静态变量和方法，
对于泛型类声明的类型和参数，可以在实例变量实例变量和方法中使用，但是
在静态变量和静态方法中不能使用，
如果是合法的话，那么对于每种实例化类型，都需要有
一个静态的变量和方法，但是由于类型檫除，静态变量和方法都是类型的属性，且和具体的
类型参数没有关系，所以不能使用泛型类型参数
不过对于静态方法，他可以是泛型方法，可以定义声明自己的类型参数，这个参数和泛型类的类型
参数是没有关系的
