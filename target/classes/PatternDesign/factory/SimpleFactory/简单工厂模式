现实生活中我们总是把同一类产品放在一个工厂中生产，消费者只需要告诉工厂自己
需要这一类产品中的哪一种产品，工厂就能够生产出对应的产品，从而完成交易。

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

首先我们来讲下为什么要引入IOC：
假设上面举例的那个程序已经部署到服务器中，并已经上线运行，
这时项目来了这样一个新需求：增加一个Japanese类，并且在HelloWorldTest
类中调用Japanese的sayHelloWorld方法。在没有引入IOC之前，很显然我们为了这个新需求，
必须把项目停止下来，然后从新编译HumanFactory 和HelloWorldTest这两个类，最后再重新上线运行。
而使用IOC，则能够在不重新编译部署的情况下实现上面的新需求！
那么我们来看一下IOC是去怎么实现这个新需求的：

*****
http://blog.csdn.net/jidubaozou/article/details/7332079
工厂模式+反射=beanFactory==IOC